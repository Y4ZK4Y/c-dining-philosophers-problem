
// challenges: starvation - synchronization - fair allocation of resources - deadlock prevention

// time tracking - synchronization - state management

// deadlock prevention algos: 1. resource hierarchy 2. odd/even
// starvation avoidance: fair queueing(scheduling system) queue philos based on turns
monitor states; to see who has been waiting the longest

// one thread per philo
// no global variable
// one fork per philo// 
// a mutex per fork and that it's used to check the fork value and/or change it.
// outputs should not mix up
// death of a philo should be verified
// there should be a mutex to prevent philo from dying and starting eating at the same time
// do not test with more tahn 200 philos
// to run the program:
// ./philo <num_philo> <time_die> <time_eat> <time_sleep>
// ints between 0 and int_max

// atomic variables?



// time each state
philo_life_cycle()
{
    while (sim not ended) // or while philo alive
    {
        think();
        pickup forks();
        eat();
        put_down_forks();
        sleep();    
    }
}

sim()
{
    create_threads;
    join threads;


}


init()
{
    init_philos();
    init_forks();
    init_logs();
}


wait for philos to finish or if somebody dies
main()
{
    parse();
    init();
    start similation();
    cleanup exit;
}


cleanup()
{
    destroy mutexes;
    free resources();
}


forks can be an array of mutexes
mutexes for logging


think()
{
    logging;

}


// watch out for deadlocks
// using a waiter algorithm where philos pick u p the lowered num fork first,e xcept for guy numebr 1 who picksup the higher numbered.

pick_up_forks()
{
    lock fork
    while fork not available
        wait
    unlock fork
}



put down forks()
{
    signal that its done and other can eat (monitor)
}


// request monitor for eating
eat()
{
    mark start of eating;
    wait for (time_to_eat)
    meal_count++
    last_meal update;
}

sleep()
{
    log;
    wait for time_to_sleep;
}


// only on thread can log at a time// use mutexes
logging()
{
    time_stamp
}


// a thread
monitor()
{
    while (sim ok)
    {
        check philos lastmeal time;
        if philo starved
            end sim;
    }

}


figure out the shared resources to specify the "critical section" of the program
logs - forks - philo satates?


typedef struct fork
whos holding the work
locked or unlocked


philos queue ? circular singly linked list? 
philosophers pick up forks in a consistant torder
if i use a doubly linked list for philosophers, does that violate the yjey shouldf not talk to each other rule ?


shared resources:
forks(mutexes)
states (an array)
should it be a struct??
typedef struct shared resources{

}; shared_resources
shared_resources shared;
for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
    pthread_mutex_init(&shared.forks[i], NULL);
}


int left_fork = philosopher_id;
int right_fork = (philosopher_id + 1) % NUM_PHILOSOPHERS;


philo_lifecycle();
get_time_ms();
eat();
sleep();
think();
pick_up_forks();
put_down_forks();



structs:

typedef struct s_info
{
    t_philo *philosophers;
    t_forks *forks;
    t_logging *logs;
    t_input *input;
    
    bool is_dead;

}   t_info;


enum philo_states{
    eating,
    thinking,
    sleeping,
    dead,
    hungry,
};


enum simulation_state {
    active,
    inactive,

};

typedef struct s_philo {
    int id; // 1 to num_philo
    long long last_meal_time;
    int num_meals;
    *left_fork;
    *right_fork;
    char *philos[];
    pthread_t thread;

    

} t_philo;

typedef struct s_input
{
    int num_of_philos;
    int time_to_die;
    int time_to_eat;
    int time_to_sleep; // long long

}   t_input;

typedef struct s_monitor
{
    does it need mutex?
    static_assertforks availability

}   t_monitor;




parse()
{

}
./philo 10 20 30 40


// enum simulation_state {
//     active,
//     inactive,

// };

// typedef struct s_monitor
// {
//     does it need mutex?
//     static_assertforks availability

// }   t_monitor;


*left_fork;
    *right_fork;
    char *philos[];







// void *func(void *arg)
// {
//     t_info *info = (t_info *)arg;

//     pthread_mutex_lock(&info->mutex);
//     printf("hello from func.\n");
//     pthread_mutex_unlock(&info->mutex);
//     pthread_mutex_unlock(&info->mutex);
//     usleep(100); // Sleep for a short time to avoid busy waiting
    

//     return NULL;
// }


// int main(int argc, char **argv)
// {
//     t_input input;
//     int i;
//     t_info info;


//     if (argc != 5)
//     {
//         printf("arg aint right\n");
//         return (1);
//     }

//     input = parse(argc, argv);
//     if (input.error == 1)
//     {
//         printf("parsing failed.\n");
//         return (1);
//     }
//     bzero(&info, sizeof(info));
//     pthread_t p[5];
//     pthread_mutex_init(&info.mutex, NULL);
//     for (i = 0; i < 5; i++)
//     {
//         pthread_create(&p[i], NULL, &func, &info);
//         printf("thread %d started: %p\n", i, p[i]);
//     }
//     for (i = 0; i < 5; i++)
//     {
//         pthread_join(p[i], NULL);
//         printf("thread %d joined: %p\n", i, p[i]);
//     }
//     pthread_mutex_destroy(&info.mutex);
//     return (0);

// }




output to stdout
error to stderr



----------------------------------------------------
new plan:

// monitor.c







// philo_life_cycle
philo_life_cycle()
{

}








// sim.c

wait_for_threads
{
    pthread join for every threads
}

create_threads
{
    create_thread for num_philo
    sim_on true
    get the start time
}


sim
{
    create_monitor;
    create_threads();
    wait_for_threads();
}





// init.c
init_mutexes()
{
    mutex init for forks (num_philos);
    init mutex for write_log;
}


init_philo
{
    for num of philos
        init the struct
        assign values
        malloc for thread
}


init_monitor()
{
    malloc for one monitor;
    init mutex turn lock;
    assign values;

}

init
{
    malloc for num of philos (5 people ie)
    init_philo(); //init struct for every philo
    init_mutexes();
    init_monitor();
}



// input.c
parse_input
{
    initialize input struct;
    ft_strtol argv into int;
    assign values;
}

get_input
{
    check num of args;
    parse input;
    if num_philo 0 or less
        exit;
}


// main.c
main
{
    get_input();
    philo_init();
    start_sim();
    exit_cleanup();
}



-----------------------------

philo i taking the fork

wait(mutex) / enter critical sec
state[i] = hungry
test(i); // try to get 2 forks
signal(mutex); //exit critical
wait(s[i]) // block if fork not acquired

test(i)
{
    if (state[i] == hungry && state[(i+4)%5] != eating && state[(i+1)%5] != eating)
        state[i] = eating
        signal(s[i])
}

philo i puts fork down
wait(mutex); // critical
sate[i] = thiinking // phil done ating
test((i+4)%5); // see if left phil can eat
test( (i+1_ % 5)); //see if right phil can eat
signal(mutex); / /exit critical

1;
		info->philos[i].right_fork_index = -1;


// code from monitor

// void	*monitor(void	*arg)
// {
// 	t_monitor	*monitor;
// 	t_philo		*philo;

// 	monitor = (t_monitor *)arg;
// 	while (!monitor->stop)// or while sim_on or philos alive
// 	{
// 		if (philo status inactive)
// 			break;
// 		pthread_mutex_lock(&monitor->turn_lock);
// 		if (monitor->queue_size > 0)
// 		{
// 			philo = dequeue(monitor);
// 			if (philo)
// 			{
// 				// Grant resources to the philosopher
// 				// (e.g., allow them to take forks and eat)
// 				// This part depends on your specific implementation
// 			}
// 		}
// 		pthread_mutex_unlock(&monitor->turn_lock);
// 		usleep(1000);
// 	}
// 	return NULL;
// }


// /* Compare function to determine priority (e.g., based on hunger or wait time) */
// int	compare_philos(t_philo *a, t_philo *b)
// {
// 	return (a->num_meals - b->num_meals);
// }

// /* Insert a philosopher into the priority queue */
// void	enqueue(t_monitor *monitor, t_philo *philo)
// {
// 	t_philo	*temp;

// 	pthread_mutex_lock(&monitor->turn_lock);
// 	if (monitor->queue_size == monitor->queue_capacity)
// 	{
// 		// Resize the queue if necessary
// 		monitor->queue_capacity *= 2;
// 		monitor->queue = realloc(monitor->queue, sizeof(t_philo *) * monitor->queue_capacity);
// 	}
// 	monitor->queue[monitor->queue_size++] = philo;
// 	// Sort the queue based on priority
// 	for (int i = monitor->queue_size - 1; i > 0 && compare_philos(monitor->queue[i], monitor->queue[i - 1]) < 0; i--)
// 	{
// 		temp = monitor->queue[i];
// 		monitor->queue[i] = monitor->queue[i - 1];
// 		monitor->queue[i - 1] = temp;
// 	}
// 	pthread_mutex_unlock(&monitor->turn_lock);
// }

// /* Remove and return the highest priority philosopher from the queue */
// t_philo	*dequeue(t_monitor *monitor)
// {
// 	t_philo	*philo;

// 	pthread_mutex_lock(&monitor->turn_lock);
// 	if (monitor->queue_size == 0)
// 	{
// 		pthread_mutex_unlock(&monitor->turn_lock);
// 		return NULL;
// 	}
// 	philo = monitor->queue[--monitor->queue_size];
// 	pthread_mutex_unlock(&monitor->turn_lock);
// 	return (philo);
// }


TODO: make wrapper functions
for pthread api functions, malloc, 



init
malloc forks, philos


use static functions  more often

avoid fork deadlock situation
dijkstra
odd even
think about the wors case and best case and stuff

think about fairness

no cycle, no deadlock
think about fork assignment

think about different input scebarios and what will happen



if no meal
    return
if one philo
    single philo function
create threads
creat emonitor thread
synch sim
join threads


setters and getter sin c code
spinlock ?



// static void assign_forks(t_philo *philo, t_fork *forks, int philo_pos)
// {
// 	if (philo->id % 2)
// 	{
// 		philos[i].fork = &(philo->forks[philo_pos]);
// 		philos[i].fork_plus = &(philo->forks[philo_pos + 1] % philo_nuum);
// 	}
// 	philos[i].left_fork = &(info->forks[i]);
// 	philos[i].right_fork = &(info->forks[(i+1)% info->input.num_of_philos]);

// }


if it's the last philo, right fork is index 0
otehrwise its the philo id
left fork is id -1

	// int	fork_index[2];

	// fork_index[0] = philo->id - 1;
	// fork_index[1] = right_index(philo);
	// check to see both forks are available to pick up(left then right)
	// if not, wait, change status to hungry
	// if forks available
	// lock forks





./philo 800 100000 0 0
lazy philosopher tester
